#!/usr/bin/env bash
source "$(dirname "${BASH_SOURCE[0]}")/../libexec/tools/brew-dual-utility"

merge_to_fat_binary() {
    local arm_binary="$1"
    local x86_binary="$2"
    local output_binary="$3"

    color_echo "INFO" "Merging $arm_binary and $x86_binary into $output_binary"
    if [[ "$DRY_RUN" == "true" ]]; then
        color_echo "INFO" "(Dry-run) Would merge $arm_binary and $x86_binary into $output_binary"
    else
        lipo -create -output "$output_binary" "$arm_binary" "$x86_binary"
        if [[ $? -eq 0 ]]; then
            color_echo "INFO" "✅ Successfully created Fat binary: $output_binary"
        else
            color_echo "ERROR" "❌ Failed to merge binaries for $output_binary"
        fi
    fi
}

brew_dual_merge() {
    local output_dir="$1"
    shift
    local packages=("$@")

    for package in "${packages[@]}"; do
        local arm_real_path=$(get_package_cellar_path "$ARM_BREW" "$package" "$ARM_ARCH")
        local x86_real_path=$(get_package_cellar_path "$X86_BREW" "$package" "$X86_ARCH")

        if [[ -z "$arm_real_path" || -z "$x86_real_path" ]]; then
            color_echo "WARN" "⚠️ Package $package does not have both ARM and x86 versions installed. Skipping merge."
            continue
        fi

        arm_binaries=()
        x86_binaries=()
        while IFS= read -r file; do arm_binaries+=("$file"); done < <(find "$arm_real_path" -type f -perm -111 2>/dev/null)
        while IFS= read -r file; do x86_binaries+=("$file"); done < <(find "$x86_real_path" -type f -perm -111 2>/dev/null)
        
        for arm_binary in "${arm_binaries[@]}"; do
            local binary_name=$(basename "$arm_binary")
            local x86_binary=""
            for file in "${x86_binaries[@]}"; do
                if [[ "$(basename "$file")" == "$binary_name" ]]; then
                    x86_binary="$file"
                    break
                fi
            done
            
            local fat_binary="${output_dir:-$arm_real_path}/$binary_name"
            local backup_binary="$arm_binary.bak"
            
            if [[ -n "$x86_binary" && -f "$x86_binary" ]]; then
                if [[ -z "$output_dir" ]]; then
                    $DRY_RUN || cp "$arm_binary" "$backup_binary"
                fi
                
                merge_to_fat_binary "$arm_binary" "$x86_binary" "$fat_binary"
                
                if [[ -z "$output_dir" && $? -ne 0 ]]; then
                    color_echo "ERROR" "❌ Merge failed, restoring original ARM binary."
                    $DRY_RUN || mv "$backup_binary" "$arm_binary"
                elif [[ -f "$backup_binary" ]]; then
                    $DRY_RUN || rm -f "$backup_binary"
                fi
            fi
        done
    done
}
