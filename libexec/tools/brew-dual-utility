#!/usr/bin/env bash

is_installed() {
    local brew_path="$1"
    local package="$2"
    local arch_cmd="$3"

    log "INFO" "Running is_installed with: brew_path=$brew_path, package=$package, arch_cmd=$arch_cmd"

    # Check if the exact package name is installed
    if $arch_cmd "$brew_path" list --formula | grep -qx "$package"; then
        log "INFO" "✅ Package '$package' found in '$brew_path'."
        return 0
    fi

    # Extract aliases using awk
    local installed_names
    installed_names=$($arch_cmd "$brew_path" info --json=v2 "$package" 2>/dev/null | awk -F'"' '
        /"aliases": *\[/ { in_aliases=1; next }
        in_aliases && /\]/ { in_aliases=0; next }
        in_aliases { print $2 }
    ')

    log "INFO" "Extracted aliases for '$package': $installed_names"

    # Check if the package name matches any alias
    if [[ " $installed_names " == *" $package "* ]]; then
        log "INFO" "✅ Package '$package' is installed as an alias: $installed_names"
        return 0
    fi

    log "WARN" "❌ Package '$package' is NOT installed in '$brew_path'."
    return 1
}



get_package_name() {
    local brew_path="$1"
    local package="$2"
    local arch_cmd="$3"

    log "INFO" "Running get_package_name with: brew_path=$brew_path, package=$package, arch_cmd=$arch_cmd"

    local real_name
    real_name=$($arch_cmd "$brew_path" info --json=v2 "$package" 2>/dev/null | awk -F'"' '
        /"name":/ { print $4; exit }
    ')

    if [[ -n "$real_name" ]]; then
        log "INFO" "Extracted package name for '$package': $real_name"
        color_echo "INFO" "$real_name"
        return 0
    fi

    log "WARN" "❌ Failed to extract package name for '$package' in '$brew_path'."
    return 1
}


get_package_path() {
    local brew_path="$1"
    local package="$2"
    local arch_cmd="$3"

    log "INFO" "Running get_package_path with: brew_path=$brew_path, package=$package, arch_cmd=$arch_cmd"

    local real_path
    real_path=$($arch_cmd "$brew_path" --prefix "$package" 2>/dev/null)
    if [[ -n "$real_path" && -d "$real_path" ]]; then
        log "INFO" "Resolved package prefix path: $real_path"
        return 0
    fi

    log "WARN" "❌ Package '$package' not found in Homebrew prefix at '$brew_path'."
    return 1
}

get_package_full_path() {
    local brew_path="$1"
    local package="$2"
    local arch_cmd="$3"

    log "INFO" "Running get_package_full_path with: brew_path=$brew_path, package=$package, arch_cmd=$arch_cmd"

    local real_path
    real_path=$($arch_cmd "$brew_path" --cellar "$package" 2>/dev/null)
    if [[ -z "$real_path" || ! -d "$real_path" ]]; then
        log "WARN" "❌ Package '$package' not found in Homebrew cellar at '$brew_path'."
        return 1
    fi

    local latest_version
    latest_version=$(find "$real_path" -mindepth 1 -maxdepth 1 -type d | xargs -I {} basename {} | sort -V | tail -n 1)

    if [[ -z "$latest_version" ]]; then
        log "WARN" "⚠️ No installed versions found for package '$package' in '$real_path'."
        return 1
    fi

    local full_path="$real_path/$latest_version"
    log "INFO" "Resolved latest installed version path for '$package': $full_path"
    color_echo "INFO" "$full_path"
    
    return 0
}